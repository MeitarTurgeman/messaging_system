pipeline {
    agent any

    environment {
        DOCKER_USER = "meitarturgeman"
        FLASK_CONTAINER_NAME = "flask-app"
        FLASK_IMAGE_NAME = "meitarturgeman/messages-api:latest"
        DOCKER_REGISTRY = "docker.io"
        KUBECONFIG = "/var/jenkins_home/.kube/config"
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Build Flask Docker Image') {
            steps {
                script {
                    sh "docker build -t ${FLASK_IMAGE_NAME} ."
                }
            }
        }
        
        stage('Deploy Flask Locally') {
            steps {
                script {
                    sh """
                    docker stop ${FLASK_CONTAINER_NAME} || true
                    docker rm ${FLASK_CONTAINER_NAME} || true
                    docker run -d --name ${FLASK_CONTAINER_NAME} -p 5000:5000 ${FLASK_IMAGE_NAME}
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                    export KUBECONFIG=${KUBECONFIG}
                    
                    # Verify configuration
                    echo "Verifying Kubernetes connection..."
                    kubectl config view
                    kubectl get nodes
                    
                    # Deploy application
                    echo "Deploying application..."
                    kubectl apply -f kubernetes/deployment.yaml
                    kubectl apply -f kubernetes/service.yaml
                    
                     # Wait for deployment
                    echo "Waiting for deployment to complete..."
                    kubectl rollout status deployment/flask-app
                    
                    # Show deployment status
                    echo "Showing deployment status..."
                    kubectl get pods
                    kubectl get services
                    """
                }
            }
        }
    }
}
